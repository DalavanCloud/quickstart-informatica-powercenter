{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Informatica PowerCenter",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCCID",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "DBSubnetIDs",
                        "RemoteAccessCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "PowerCenterInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon RDS Configuration"
                    },
                    "Parameters": [
                        "DatabaseUsername",
                        "DatabasePassword",
                        "DatabaseType"
                    ]
                },
                {
                    "Label": {
                        "default": "Informatica PowerCenter Configuration"
                    },
                    "Parameters": [
                        "InformaticaDomainPassword",
                        "EncryptionKeyPhrase"
                    ]
                }
            ],
            "ParameterLabels": {
                "DBSubnetIDs": {
                    "default": "Informatica Database Subnets"
                },
                "DatabasePassword": {
                    "default": "Informatica Database Password"
                },
                "DatabaseType": {
                    "default": "Database Type"
                },
                "DatabaseUsername": {
                    "default": "Informatica Database Username"
                },
                "EncryptionKeyPhrase": {
                    "default": "Encryption Key Phrase"
                },
                "InformaticaDomainPassword": {
                    "default": "Informatica Administrator Password"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "PowerCenterInstanceType": {
                    "default": "Informatica Domain Instance Type"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet 1 CIDR"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet 2 CIDR"
                },
                "RemoteAccessCIDR": {
                    "default": "Allowed Remote Access CIDR"
                },
                "VPCID": {
                    "default": "VPC ID"
                }
            }
        }
    },
    "Parameters": {
        "DBSubnetIDs": {
            "Description": "Select two subnet IDs each from a different region in the VPC chosen above (such as: us-west-1b, us-west-1c)",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "DatabasePassword": {
            "Description": "Password for the Informatica domain and the Model repository database instance",
            "MaxLength": "18",
            "MinLength": "8",
            "NoEcho": "True",
            "Type": "String"
        },
        "DatabaseType": {
            "AllowedValues": [
                "Oracle"
            ],
            "ConstraintDescription": "Oracle",
            "Default": "Oracle",
            "Description": "The type of database to use in Amazon RDS. Currently, you can only use Oracle.",
            "Type": "String"
        },
        "DatabaseUsername": {
            "Description": "Username for the Informatica domain and the Model repository database instance",
            "MaxLength": "18",
            "MinLength": "8",
            "Type": "String"
        },
        "EncryptionKeyPhrase": {
            "AllowedPattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{8,}$",
            "ConstraintDescription": "It should be 8 to 20 characters long, at least one uppercase letter at least one lowercase letter-at least one number Does not contain spaces",
            "Description": "The text string used as the base word from which to generate an encryption key for the Informatica domain.",
            "MaxLength": "32",
            "MinLength": "8",
            "NoEcho": "true",
            "Type": "String"
        },
        "InformaticaDomainPassword": {
            "Description": "Password to access Informatica Administrator",
            "NoEcho": "True",
            "Type": "String"
        },
        "PowerCenterInstanceType": {
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge"
            ],
            "Default": "m4.large",
            "Description": "Enter the instance type for the Informatica Administrator. Default is m4.large",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the Informatica Domain",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PublicSubnet1ID": {
            "Description": "Select a publically accessible subnet ID for the Informatica Domain",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "Select a publically accessible subnet ID for the Informatica Domain",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "Allowed CIDR block for external access to the Informatica domain and the EMR cluster",
            "Type": "String"
        },
        "VPCID": {
            "Description": "Which VPC should this be deployed to?",
            "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "INFORMATICAPCHVM": "10.1_Linux_Server_2-b1c14762-8f3f-41df-ae2c-91adee508cf9-ami-8dd0589a.3"
            },
            "ap-northeast-1": {
                "INFORMATICAPCHVM": "ami-46985027"
            },
            "ap-northeast-2": {
                "INFORMATICAPCHVM": "TBD"
            },
            "ap-south-1": {
                "INFORMATICAPCHVM": "TBD"
            },
            "ap-southeast-1": {
                "INFORMATICAPCHVM": "ami-6a7ea609"
            },
            "ap-southeast-2": {
                "INFORMATICAPCHVM": "ami-a22016c1"
            },
            "eu-central-1": {
                "INFORMATICAPCHVM": "ami-f819e997"
            },
            "eu-west-1": {
                "INFORMATICAPCHVM": "ami-9a9dede9"
            },
            "sa-east-1": {
                "INFORMATICAPCHVM": "ami-1064f57c"
            },
            "us-east-1": {
                "INFORMATICAPCHVM": "ami-42cda155"
            },
            "us-east-2": {
                "INFORMATICAPCHVM": "TBD"
            },
            "us-west-1": {
                "INFORMATICAPCHVM": "ami-8e83ceee"
            },
            "us-west-2": {
                "INFORMATICAPCHVM": "ami-71f72111"
            }
        },
        "AWSInfoRegionMap": {
            "ap-northeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-northeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-south-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "ap-southeast-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-central-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "eu-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "sa-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-east-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-gov-west-1": {
                "Partition": "aws-us-gov",
                "QuickStartS3URL": "https://s3-us-gov-west-1.amazonaws.com"
            },
            "us-west-1": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            },
            "us-west-2": {
                "Partition": "aws",
                "QuickStartS3URL": "https://s3.amazonaws.com"
            }
        },
        "Config": {
            "Settings": {
                "RDPNetwork": "0.0.0.0/0",
                "InformaticaDomainName": "InfaDefaultDomain",
                "DatabaseName": "pc",
                "Node1Name": "PowercenterNode1",
                "Node2Name": "PowercenterNode2",
                "Node3Name": "PowercenterNode3",
                "Node4Name": "PowercenterNode4",
                "Node2ServesAsGateway": 1,
                "Node3ServesAsGateway": 1,
                "Node4ServesAsGateway": 1,
                "DatabaseSize": "db.m3.large",
                "MultiAZ": false,
                "IntegrationServiceName": "PowerCenterIntegrationService",
                "RepositoryServiceName": "PowerCenterRepository",
                "InformaticaServices": 2,
                "GridName": "InfaDefaultGrid"
            },
            "Oracle": {
                "Engine": "oracle-ee",
                "LicenseModel": "bring-your-own-license",
                "AllocatedStorage": "100",
                "Port": 1521
            }
        }
    },
    "Resources": {
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable RDP and within VPC traffic",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5000",
                        "ToPort": "7000",
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }
                    }
                ]
            }
        },
        "InstanceSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "IpProtocol": "-1",
                "FromPort": "-1",
                "ToPort": "-1",
                "SourceSecurityGroupId": {
                    "Fn::GetAtt": [
                        "InstanceSecurityGroup",
                        "GroupId"
                    ]
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "InstanceSecurityGroup",
                        "GroupId"
                    ]
                }
            },
            "DependsOn": "InstanceSecurityGroup"
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnet Group for RDS",
                "SubnetIds": {
                    "Ref": "DBSubnetIDs"
                },
                "Tags": [
                    {
                        "Key": "Env",
                        "Value": "Infa-HOL-Demo"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ICS DB SG",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1521",
                        "ToPort": "1521",
                        "SourceSecurityGroupId": {
                            "Ref": "InstanceSecurityGroup"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Env",
                        "Value": "Infa-HOL-Demo"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCID"
                }
            }
        },
        "RDSInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "AllocatedStorage"
                    ]
                },
                "DBInstanceClass": {
                    "Fn::FindInMap": [
                        "Config",
                        "Settings",
                        "DatabaseSize"
                    ]
                },
                "DBName": {
                    "Fn::FindInMap": [
                        "Config",
                        "Settings",
                        "DatabaseName"
                    ]
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "Engine"
                    ]
                },
                "LicenseModel": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "LicenseModel"
                    ]
                },
                "MasterUsername": {
                    "Ref": "DatabaseUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MultiAZ": {
                    "Fn::FindInMap": [
                        "Config",
                        "Settings",
                        "MultiAZ"
                    ]
                },
                "Port": {
                    "Fn::FindInMap": [
                        "Config",
                        {
                            "Ref": "DatabaseType"
                        },
                        "Port"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Infa-PowerCenter"
                    }
                ],
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "InformaticaMasterEIPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "InformaticaMasterEC2Instance"
                }
            }
        },
        "InformaticaMasterEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "1-setup": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sh /home/ec2-user/InfaEc2Scripts/linInfaInstallerEc2.sh ",
                                            {
                                                "Ref": "InformaticaDomainPassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            " ",
                                            {
                                                "Ref": "EncryptionKeyPhrase"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::FindInMap": [
                                "Config",
                                "Settings",
                                "Node1Name"
                            ]
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "INFORMATICAPCHVM"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1ID"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "PowerCenterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash \n",
                                "echo \"Initializing variables\" \n",
                                "export CREATE_DOMAIN=1 \n",
                                "export JOIN_DOMAIN=0 \n",
                                "export SERVES_AS_GATEWAY=0 \n",
                                "export DB_TYPE=\"",
                                {
                                    "Ref": "DatabaseType"
                                },
                                "\"\n",
                                "export REPOSITORY_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "RepositoryServiceName"
                                    ]
                                },
                                "\"\n",
                                "export INTEGRATION_SERVICE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "IntegrationServiceName"
                                    ]
                                },
                                "\"\n",
                                "export DB_ADDRESS=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                "\"\n",
                                "export DB_PORT=\"",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                "\"\n",
                                "export DB_UNAME=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "export DB_SERVICENAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "DatabaseName"
                                    ]
                                },
                                "\"\n",
                                "export DOMAIN_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "InformaticaDomainName"
                                    ]
                                },
                                "\"\n",
                                "export NODE_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "Node1Name"
                                    ]
                                },
                                "\"\n",
                                "export GRID_NAME=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "GridName"
                                    ]
                                },
                                "\"\n",
                                "export REPO_USER=\"",
                                {
                                    "Ref": "DatabaseUsername"
                                },
                                "\"\n",
                                "export INFORMATICA_SERVICES=\"",
                                {
                                    "Fn::FindInMap": [
                                        "Config",
                                        "Settings",
                                        "InformaticaServices"
                                    ]
                                },
                                "\"\n",
                                "export JOIN_NODE_NAME=\"InformaticaNodeName\" \n",
                                "export DOMAIN_HOST_NAME=\"$HOSTNAME\" \n",
                                "echo \"running cfn init\" \n",
                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r InformaticaMasterEC2Instance ",
                                "    --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? '",
                                {
                                    "Ref": "InformaticaMasterWaitConditionHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                }
            },
            "DependsOn": "RDSInstance"
        },
        "InformaticaMasterWaitConditionHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "InformaticaMasterWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "InformaticaMasterEC2Instance",
            "Properties": {
                "Handle": {
                    "Ref": "InformaticaMasterWaitConditionHandle"
                },
                "Timeout": "8000"
            }
        }
    },
    "Outputs": {
        "PowerCenterAgentIP": {
            "Value": {
                "Fn::GetAtt": [
                    "InformaticaMasterEC2Instance",
                    "PublicIp"
                ]
            },
            "Description": "Elastic IP address of the PowerCenter instance"
        },
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "InformaticaMasterEC2Instance"
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "InformaticaMasterEC2Instance",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "InformaticaMasterEC2Instance",
                    "PublicDnsName"
                ]
            }
        },
        "RDSInstance": {
            "Value": {
                "Ref": "RDSInstance"
            },
            "Description": "RDS Instance ID"
        },
        "VPC": {
            "Description": "VPCId of the newly created VPC",
            "Value": {
                "Ref": "VPCID"
            }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "InformaticaMasterEC2Instance",
                    "PublicIp"
                ]
            }
        },
        "PublicSubnet": {
            "Description": "SubnetId of the public subnet",
            "Value": {
                "Ref": "PublicSubnet1ID"
            }
        },
        "DataTierSubnet1": {
            "Description": "SubnetId of the public subnet",
            "Value": {
                "Fn::Select": [
                    "0",
                    {
                        "Ref": "DBSubnetIDs"
                    }
                ]
            }
        },
        "DataTierSubnet2": {
            "Description": "SubnetId of the public subnet",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Ref": "DBSubnetIDs"
                    }
                ]
            }
        }
    }
}
